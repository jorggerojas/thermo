{"version":3,"sources":["components/editor/editor.js","components/editor/data.js","components/meme_generator/options.js","components/meme_generator/img.js","components/meme_generator/meme.js","components/app.js","index.js"],"names":["Text","textarea","resize","padding","width","height","marginLeft","fontSize","parseInt","this","props","color","textAlign","border","borderRadius","backgroundColor","outline","className","style","id","defaultValue","cookie","load","text","React","Component","Data","dataCookie","state","size","align","handleSize","bind","handleColor","handleBGColor","handleTextAlign","event","target","setState","value","data","document","getElementById","save","path","uk-grid","key","ref","marginTop","minLength","min","max","step","onChange","type","onClick","saveText","Options","onKeyUp","up","placeholder","down","Img","src","meme","alt","Meme","memes","img","handleUp","handleDown","loadMeme","fetch","method","mode","cache","then","json","response","success","random","Math","floor","length","url","toString","alert","catch","error","console","log","substring","uk-overflow","href","printMeme","Printd","print","App","actual","Select","click","ReactDOM","render"],"mappings":"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","file":"static/js/main.9d00de97.chunk.js","sourcesContent":["import React from 'react';\r\nimport cookie from 'react-cookies';\r\nimport '../../css/index.css';\r\n\r\nexport default class Text extends React.Component {\r\n    render() {\r\n        const textarea = {\r\n            resize: \"none\",\r\n            padding: \"10px 10px\",\r\n            width: \"100%\",\r\n            height: \"50vh\",\r\n            marginLeft: \"-10px\",\r\n            fontSize: parseInt(this.props.fontSize),\r\n            color: this.props.color,\r\n            textAlign: this.props.textAlign,\r\n            border: \"1.5px solid black\",\r\n            borderRadius: \"15px\",\r\n            backgroundColor: this.props.backgroundColor,\r\n            outline: \"none\"\r\n        }\r\n        return (\r\n            <div className=\"uk-first-column uk-height-large uk-width-expand@s\">\r\n                <div className=\"uk-card uk-card-default uk-card-body\">\r\n                    <p className=\"uk-text-large uk-text-bold\">Text Editor</p>\r\n                    <div>\r\n                        <textarea style={textarea} id=\"text\"\r\n                            defaultValue={\r\n                                cookie.load('data') ? cookie.load('data').text : \"\"\r\n                            }>\r\n                        </textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport cookie from 'react-cookies';\r\nimport '../../css/index.css';\r\nimport Text from './editor';\r\n\r\nexport default class Data extends React.Component {\r\n    dataCookie = cookie.load('data');\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            color: this.dataCookie ? this.dataCookie.color : \"#000\",\r\n            backgroundColor: this.dataCookie ? this.dataCookie.backgroundColor : \"#fff\",\r\n            size: this.dataCookie ? this.dataCookie.size : 14,\r\n            textAlign: this.dataCookie ? this.dataCookie.align : 'left',\r\n        }\r\n        this.handleSize = this.handleSize.bind(this);\r\n        this.handleColor = this.handleColor.bind(this);\r\n        this.handleBGColor = this.handleBGColor.bind(this);\r\n        this.handleTextAlign = this.handleTextAlign.bind(this);\r\n    }\r\n    handleSize(event) {\r\n        const target = event.target;\r\n        this.setState({\r\n            size: target.value > 0 ? (target.value < 100 ? target.value : 100) : 1,\r\n        });\r\n    }\r\n    handleTextAlign(event) {\r\n        const target = event.target;\r\n        this.setState({\r\n            textAlign: target.value,\r\n        });\r\n    }\r\n    handleColor(event) {\r\n        const target = event.target;\r\n        this.setState({\r\n            color: target.value,\r\n        });\r\n    }\r\n    handleBGColor(event) {\r\n        const target = event.target;\r\n        this.setState({\r\n            backgroundColor: target.value,\r\n        });\r\n    }\r\n    saveText(editor = 0) {\r\n        const data = {\r\n            text: document.getElementById('text').value,\r\n            size: this.state.size,\r\n            color: this.state.color,\r\n            backgroundColor: this.state.backgroundColor,\r\n            align: this.state.textAlign\r\n        }\r\n        cookie.save(\"data\", data, {\r\n            path: \"/\"\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"uk-padding-large uk-text-center uk-grid\" uk-grid=\"\">\r\n                <Text\r\n                    key=\"text\" backgroundColor={this.state.backgroundColor}\r\n                    color={this.state.color} fontSize={this.state.size} textAlign={this.state.textAlign} />\r\n                <div ref={this.text} className=\"uk-first-column uk-height-large uk-width-1-4@m\" style={{ marginTop: \"50px\" }}>\r\n                    <div className=\"uk-card uk-card-default uk-card-body\">\r\n                        <div className=\"uk-form-stacked\">\r\n                            <div className=\"uk-margin uk-width-expand\">\r\n                                <div className=\"uk-child-width-1-2@s uk-grid-small\" uk-grid=\"\">\r\n                                    <div className=\"uk-form-controls\">\r\n                                        <label className=\"uk-text-left uk-form-label\">Font Size</label>\r\n                                        <input className=\"uk-input\" minLength=\"1\" min=\"1\"\r\n                                            max=\"100\" step=\"1\" value={this.state.size}\r\n                                            onChange={this.handleSize} type=\"number\" />\r\n                                    </div>\r\n                                    <div className=\"uk-form-controls\">\r\n                                        <label className=\"uk-text-left uk-form-label\">Text Align</label>\r\n                                        <select key=\"align\" className=\" uk-width-1-1\"\r\n                                            defaultValue={this.state.textAlign} onChange={this.handleTextAlign}>\r\n                                            <option value=\"left\">LEFT</option>\r\n                                            <option value=\"center\">CENTER</option>\r\n                                            <option value=\"right\">RIGHT</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"uk-margin\">\r\n                                <label className=\"uk-text-left uk-form-label\">Font Color</label>\r\n                                <div className=\"uk-form-controls\">\r\n                                    <input className=\"uk-input\" key=\"color\" type=\"color\"\r\n                                        onChange={this.handleColor} value={this.state.color} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"uk-margin\">\r\n                                <label className=\"uk-text-left uk-form-label\">Background Color</label>\r\n                                <div className=\"uk-form-controls\">\r\n                                    <input className=\"uk-input\" key=\"bgcolor\" type=\"color\"\r\n                                        onChange={this.handleBGColor} value={this.state.backgroundColor} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"uk-margin\">\r\n                                <div className=\"uk-form-controls\">\r\n                                    <input className=\"uk-input uk-button uk-button-primary\" id=\"save\" key=\"save\" type=\"button\"\r\n                                        value={\"Save\"} onClick={() => this.saveText(1)} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Options extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"uk-form-stacked\">\r\n                <div className=\"uk-margin uk-width-expand\">\r\n                    <div className=\"uk-child-width-expand\">\r\n                        <div className=\"uk-form-controls\">\r\n                            <label className=\"uk-text-left uk-form-label\">Top Text</label>\r\n                            <input className=\"uk-input uk-width-expand\"\r\n                                onKeyUp={this.props.up} id=\"input_up\" type=\"text\" placeholder=\"Top text here\" />\r\n                        </div>\r\n                        <div className=\"uk-form-controls\">\r\n                            <label className=\"uk-text-left uk-form-label\">Bottom text</label>\r\n                            <input className=\"uk-input uk-width-expand\"\r\n                                onKeyUp={this.props.down} id=\"input_down\" type=\"text\" placeholder=\"Bottom text here\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport '../../css/index.css'\r\n\r\nexport default class Img extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"img-container\" id=\"img\">\r\n                <p id=\"up\" className=\"up\" >{this.props.up}</p>\r\n                <img className=\"img\" src={this.props.meme} alt=\"\" />\r\n                <p id=\"down\" className=\"down\">{this.props.down}</p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Options from './options';\r\nimport Img from './img';\r\nimport { Printd } from 'printd'\r\n\r\nexport default class Meme extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            memes: [],\r\n            img: \"\",\r\n            up: \"\",\r\n            down: \"\",\r\n        }\r\n        this.handleUp = this.handleUp.bind(this);\r\n        this.handleDown = this.handleDown.bind(this);\r\n        this.loadMeme = this.loadMeme.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://api.imgflip.com/get_memes', {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            cache: 'default'\r\n        })\r\n            .then(data =>\r\n                data.json()\r\n            )\r\n            .then(response => {\r\n                if (response.success) {\r\n                    const { memes } = response.data;\r\n                    let random = Math.floor(\r\n                        Math.random() * memes.length\r\n                    );\r\n                    this.setState({ memes: memes });\r\n                    this.setState({ img: this.state.memes[random].url.toString() });\r\n                } else {\r\n                    alert(\"This app couldn't load network images\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                alert(\"This app couldn't load network images\");\r\n            })\r\n    }\r\n    handleUp(event) {\r\n        const target = event.target;\r\n        this.setState({\r\n            up: target.value.length <= 24 ? target.value : target.value.substring(0, 24),\r\n        });\r\n    }\r\n    handleDown(event) {\r\n        const target = event.target;\r\n        this.setState({\r\n            down: target.value.length <= 24 ? target.value : target.value.substring(0, 24),\r\n        });\r\n    }\r\n    loadMeme() {\r\n        let random = Math.floor(\r\n            Math.random() * this.state.memes.length\r\n        );\r\n        this.setState({\r\n            img: this.state.memes[random].url.toString(),\r\n            up: \"\",\r\n            down: \"\"\r\n        });\r\n        document.getElementById('input_up').value = \"\";\r\n        document.getElementById('input_down').value = \"\";\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"uk-padding-large uk-text-center uk-grid uk-height-large\" uk-grid=\"\">\r\n                <div className=\"uk-first-column uk-height-large uk-width-expand@s large uk-overflow-auto\">\r\n                    <div className=\"uk-card uk-card-default uk-card-body\" uk-overflow=\"\">\r\n                        <p className=\"uk-text-large uk-text-bold\">Meme Generator</p>\r\n                        <p className=\"uk-text-meta\">\r\n                            Idea from\r\n                             <a className=\"uk-text-link\" href=\"http://demo14.downloader.tech/\"> this page</a>\r\n                        </p>\r\n                        <button className=\"uk-margin uk-button uk-button-secondary\" onClick={this.loadMeme}>GET OTHER MEME</button>\r\n                        <div className=\"uk-child-width-1-2@s uk-grid-small\" uk-grid=\"\">\r\n                            <Options up={this.handleUp} down={this.handleDown} />\r\n                            <Img meme={this.state.img} up={this.state.up} down={this.state.down} />\r\n                        </div>\r\n                        <button className=\"uk-margin uk-button uk-button-primary\" onClick={printMeme}>DOWNLOAD MEME</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet printMeme = () => {\r\n    try {\r\n        const print = new Printd();\r\n        print.print(document.getElementById('img'), [\r\n            `\r\n            .img {\r\n                max-height: 40em;\r\n            }\r\n\r\n            .img-container {\r\n                position: relative;\r\n                text-align: center;\r\n                align-self: center;\r\n            }\r\n\r\n            .up {\r\n                position: absolute;\r\n                font-size: 2rem;\r\n                text-align: center;\r\n                left: 52%;\r\n                transform: translateX(-50%);\r\n                margin: .3em 0;\r\n                font-family: impact,\r\n                    sans-serif;\r\n                text-transform: uppercase;\r\n                color: #fff;\r\n                letter-spacing: 2px;\r\n                text-shadow: 2px 2px 0 #000,\r\n                    -2px -2px 0 #000,\r\n                    2px -2px 0 #000,\r\n                    -2px 2px 0 #000,\r\n                    0 2px 0 #000,\r\n                    2px 0 0 #000,\r\n                    0 -2px 0 #000,\r\n                    -2px 0 0 #000,\r\n                    2px 2px 5px #000;\r\n            }\r\n\r\n            .down{\r\n                position: absolute;\r\n                font-size: 2rem;\r\n                bottom: .5em;\r\n                text-align: center;\r\n                left: 52%;\r\n                transform: translateX(-50%);\r\n                margin: .3em 0;\r\n                font-family: impact,\r\n                sans-serif;\r\n                text-transform: uppercase;\r\n                color: #fff;\r\n                letter-spacing: 2px;\r\n                text-shadow: 2px 2px 0 #000,\r\n                -2px -2px 0 #000,\r\n                2px -2px 0 #000,\r\n                -2px 2px 0 #000,\r\n                0 2px 0 #000,\r\n                2px 0 0 #000,\r\n                0 -2px 0 #000,\r\n                -2px 0 0 #000,\r\n                2px 2px 5px #000;\r\n            }\r\n            `\r\n        ], );\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n","import React from 'react';\r\nimport Data from './editor/data';\r\nimport Meme from './meme_generator/meme';\r\n\r\nexport default class App extends React.Component {\r\n    render() {\r\n        return this.props.actual === 'editor' ? <Data /> : <Meme />;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './components/app';\r\n\r\nclass Select extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            actual: 'editor'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"uk-text-center\">\r\n                    <button className=\"uk-margin-left uk-margin-top uk-button-primary uk-button\"\r\n                        onClick={() => {\r\n                            this.setState({ actual: 'editor' });\r\n                        }}>\r\n                        Editor\r\n                    </button>\r\n                    <button className=\"uk-margin-left uk-margin-top uk-button-primary uk-button\"\r\n                        onClick={() => {\r\n                            this.setState({ actual: 'meme' });\r\n                            if(document.getElementById('save')) document.getElementById('save').click();\r\n                        }}>\r\n                        Meme Generator\r\n                    </button>\r\n                </div>\r\n                <App actual={this.state.actual} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Select />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}